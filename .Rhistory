learning2014 <- select(lrn14, one_of(keep_columns))
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
# Check that all is okay with the csv-file
library(data.table)
#4.
# Save as csv:
write.table(learning2014, file="learning2014.txt")
head(learning2014csv)
# Check that all is okay with the csv-file
read.csv2("learning2014.csv")
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
# Check that all is okay with the csv-file
learning2014csv <- read.csv2("learning2014.csv")
fread("learning2014.csv")
head(learning2014csv)
str(learning2014csv)
#4.
# Save as csv:
write.txt(learning2014, file="learning2014.txt")
#4.
# Save as csv:
write.table(learning2014, file="learning2014.txt")
# Check that all is okay with the csv-file
learning2014txt <- read.table("learning2014.txt")
head(learning2014txt)
str(learning2014txt)
?header
?head
head(learning2014txt)
str(learning2014txt)
# Usva Topo
# 6.11.2018
# This file is the R-script for "Regression and model validation" exercises.
#2.
# Open the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep= "\t", header = TRUE)
# Dimensions of data
dim(lrn14)
# The data is (183, 60) dimensional.
# Structure of the data
str(lrn14)
#  Gender is a factor with levels "F" (1) and "M" (2). Other variables are integers.
# Variables from Aa to Dj are the values of 1 to 5 (likert), describing students answers to the survey.
#3.
# Open dplyr for filter() command:
library(dplyr)
# The questions:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# Exclude observations where the exam points variable is zero.
lrn14 <- filter(lrn14, Points > 0)
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
#Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf
# and points by combining questions
# choose a handful of columns to keep
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(keep_columns))
#4.
# Save as txt:
write.table(learning2014, file="learning2014.txt")
# Check that all is okay with the txt-file
learning2014txt <- read.table("learning2014.txt")
head(learning2014txt)
str(learning2014txt)
# The text file contains seven variables gender, Age, Attitude, deep, stra, surf and points.
# Variables have the correct type (i.e. gender as factor, age as initial...)
head(learning2014txt)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep=",", header=TRUE)
View(lrn14)
View(lrn14)
?sep
?read.table
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="/", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep=".", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="t/", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
dim(lrn14)
View(lrn14)
View(lrn14)
pairs(learning2014[-1], col=learning2014$gender)
pairs(lrn14[-1], col=learning2014$gender)
pairs(lrn14[-1], col=lrn14$gender)
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
pairs(lrn14[-1], col=lrn14$gender)
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# create an plot matrix with ggpairs()
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
my_model2 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# create a regression model with multiple explanatory variables
my_model2 <- lm(points ~ attitude + stra + surf, data = lrn14)
# print out a summary of the model
summary(my_model2)
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn2014) + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn14) + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender, alpha = 0.3), data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender), data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender), data = lrn14)  + geom_smooth(method = "lm")
# fit a linear model
my_model <- lm(points ~ attitude, data = lrn14)
# print out a summary of the model
summary(my_model)
# draw diagnostic plots using the plot() function. Choose the plots 1, 2 and 5
par(mfrow = c(2,2))
plot(my_model, which = c(1,2,5))
# 3.
# Read both data sets:
url_mat <- read.csv("data/student-mat.csv")
url_mat
# 3.
# Read both data sets:
url_mat <- read.csv("data/student-mat.csv", sep = ";", header = TRUE)
header(url_mat)
str(url_mat)
url_por <- read.csv("data/student-por.csv", sep = ";", header = TRUE)
str(url_por)
# 4. Join data sets
# Open dplyr for combining datasets:
library(dplyr)
# Join the two datasets with the identifiers:
math_por <- inner_join(url_mat, url_por, by = join_by)
# select the variables for joining the data sets:
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# Join the two datasets with the identifiers:
math_por <- inner_join(url_mat, url_por, by = join_by)
# Take a look at the data:
glimpse(math_por)
# Take a look at the data:
colnames(math_por)
# Join the two datasets with the identifiers:
math_por <- inner_join(url_mat, url_por, by = join_by, suffix = c("math", "por"))
# Take a look at the data:
colnames(math_por)
# Join the two datasets with the identifiers:
math_por <- inner_join(url_mat, url_por, by = join_by, suffix = c(".math", ".por"))
# Take a look at the data:
colnames(math_por)
# Take a look at the data:
colnames(math_por)
# Take a look at the data:
dim(math_por)
glimpse(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# columns that were not used for joining the data
notjoined_columns <- colnames(.math)[!colnames(.math) %in% join_by]
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(.math)[!colnames(math) %in% join_by]
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# select the variables for joining the data sets:
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
colnames(math)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(url_mat)[!colnames(url_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
#6.
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
library(dplyr)
#6.
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# Usva Topo
# 14.11.2018
# The data measures secondary education achievements in two Portugese schools.
# data source: https://archive.ics.uci.edu/ml/machine-learning-databases/00320/
# 3.
# Read both data sets:
url_mat <- read.csv("data/student-mat.csv", sep = ";", header = TRUE)
url_por <- read.csv("data/student-por.csv", sep = ";", header = TRUE)
# 4. Join data sets
# Open dplyr for combining datasets:
library(dplyr)
# select the variables for joining the data sets:
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
# Join the two datasets with the identifiers. Suffix ads .math and .por to variables, that are from another dataset.
math_por <- inner_join(url_mat, url_por, by = join_by, suffix = c(".math", ".por"))
# Take a look at the data:
dim(math_por)
# 382 obeservations and 53 rows.
colnames(math_por)
# Check the names of the variables. If the variable is from mat-data, it has a sign .mat in the end, .por if from the other dataset.
glimpse(math_por)
# 382 observations and 53 variables. Variables are factors or initials.
#5. If-else structure:
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# columns that were not used for joining the data
notjoined_columns <- colnames(url_mat)[!colnames(url_mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column  vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
# Now only 33 variables left
#6.
# define a new column alc_use by combining weekday and weekend alcohol use
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
summary(alc$alc_use)
glimpse(alc$alc_use)
alc <- mutate(alc, high_use > 2)
# Define high use column:
alc <- mutate(alc, high_use > 2)
# Define high use column:
alc <- mutate(alc, high_use = alc_use > 2)
alc$high_use
#7.
# Glimpse data:
glimpse(alc)
# Save the data:
write.table(alc, file="alc.txt")
# Double-check that the dataset looks as it should:
alc_check <- read.table("alc.txt")
glimpse(alc_check)
{r child = "chapter3.Rmd"}
read.table("data/set3_wrangling")
read.table("set3_wrangling")
read.table("/data/set3_wrangling")
read.table("~/data/set3_wrangling")
read.table("data/alc.txt")
read.table("data//alc.txt")
read.table("/data/alc.txt")
read.table("~/data/alc.txt")
read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= ".", colnames= TRUE)
read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= ".")
read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= ".", header= TRUE)
read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= "", header= TRUE)
alc <-  read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= ".", header= TRUE)
alc <-  read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/alc.txt", sep= ",", header= TRUE)
header(alc)
head(alc)
dim(alc)
names(alc)
dim(alc)
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
p <- ggpairs(alc, mapping = aes(col=sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
library(tidyr); library(dplyr); library(ggplot2); library(GGally)
p <- ggpairs(alc, mapping = aes(col=sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p <- ggpairs(alc, mapping = aes(col=sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
print(alc$failures >=1)
summary(alc$failures >=1)
summary(alc$failures >=2)
corr(alc)
cor(alc)
summary(alc$failures >=1)
summary(alc$absences >=1)
summary(alc$sex)
summary(alc$goout)
summary(alc$failures >=1)
summary(alc$absences >=1)
summary(alc$sex)
hist(alc$goout)
cor(alc$absences, alc$failures)
p <- ggpairs(alc, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p <- ggpairs(alc, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
cov(alc$failures, alc$absences)
check <- c("sex",  "Pstatus", "failures", "schoolsup", "activities",  "famrel",  "absences", "G1", "G2" , "G3", "health" )
alc$check
alc[check]
# I listed few variables that could be interesting here:
check <- c("sex",  "Pstatus", "failures", "schoolsup", "activities",  "famrel",  "absences", "G1", "G2" , "G3", "health" )
# Check correlations:
p <- ggpairs(alc[check], mapping = aes(col=sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
# I listed few variables that could be interesting here:
check <- c("sex",  "Pstatus", "failures", "schoolsup", "activities",  "famrel",  "absences", "G1", "G2" , "G3", "health", "alc_use", "high_use" )
# Check correlations:
p <- ggpairs(alc[check], mapping = aes(col=sex, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
p
cor(alc$high_use, alc$sex)
cor(alc$high_use, alc$goout)
cor(alc$high_use, as.numeric(alc$sex))
as.numeric(alc$sex)
(alc$sex)
cor(alc$high_use, as.numeric(alc$sex))
plot(alc$high_use, as.numeric(alc$sex))
qplot(alc$high_use, as.numeric(alc$sex), mapping = aes(col=gender), data = lrn14)  + geom_smooth(method = "lm")
cor(alc$high_use, as.numeric(alc$sex))
plot(alc$high_use, as.numeric(alc$sex))
qplot(alc$high_use, as.numeric(alc$sex), mapping = aes(col=sex), data = lrn14)  + geom_smooth(method = "lm")
cor(alc$high_use, as.numeric(alc$sex))
plot(alc$high_use, as.numeric(alc$sex))
qplot(high_use, as.numeric(sex), mapping = aes(col=sex), data = alc)  + geom_smooth(method = "lm")
cor(alc$high_use, as.numeric(alc$sex))
plot(alc$high_use, as.numeric(alc$sex))
qplot(high_use, sex, mapping = aes(col=sex), data = alc)  + geom_smooth(method = "lm")
cor(alc$high_use, alc$goout)
qplot(high_use, goout, mapping = aes(col=sex), data = alc)  + geom_smooth(method = "lm")
cor(alc$high_use, alc$goout)
qplot(alc_use, goout, mapping = aes(col=sex), data = alc)  + geom_smooth(method = "lm")
cor(alc$high_use, as.numeric(alc$sex))
cor(alc$high_use, alc$goout)
cor(alc$high_use, as.numeric(alc$sex))
cor(alc$high_use, alc$famrel)
cor(alc$high_use, alc$absences)
cor(alc$high_use, alc$G3)
cor(alc$high_use, alc$absences)
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade") + + ggtitle("Grades by alcohol consumption and sex")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3, col = sex))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade") + ggtitle("Grades by alcohol consumption and sex")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# initialize a plot of high_use and G3
g3 <- ggplot(alc, aes(x = high_use, y = goout, col = sex))
# define the plot as a boxplot and draw it
g3 + geom_boxplot() + ylab("going out") + ggtitle("Going out by alcohol consumption and sex")
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
# initialize a plot of high_use and G3
g3 <- ggplot(alc, aes(x = high_use, y = famrel, col = sex))
# define the plot as a boxplot and draw it
g3 + geom_boxplot() + ylab("going out") + ggtitle("Going out by alcohol consumption and sex")
# initialize a plot of high_use and G3
g3 <- ggplot(alc, aes(x = high_use, y = goout, col = sex))
# define the plot as a boxplot and draw it
g3 + geom_boxplot() + ylab("going out") + ggtitle("Going out by alcohol consumption and sex")
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = G3, fill = sex))
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = goout, fill = sex))
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar() + ggtitle("Alcohol use by sex")
g1 <- ggplot(data = alc, aes(x = goout, fill = sex))
g1 + geom_bar()
g2 <- ggplot(data = alc, aes(x = absences, fill = sex))
g2 + geom_bar()
g3 <- ggplot(data = alc, aes(x = G3, fill = sex))
g3 + geom_bar()
g2 <- ggplot(alc, aes(high_use))
# draw a bar plot of high_use by sex
g2 + facet_wrap("sex") + geom_bar()
g2 <- ggplot(alc, aes(high_use))
# draw a bar plot of high_use by sex
g2 + facet_wrap("sex") + geom_bar()
m <- glm(high_use ~ famrel + goout + absences + sex, data = alc, family = "binomial")
# print out a summary of the model
summary(m)
# print out the coefficients of the model
coef(m)
# alc and dlyr are available
# find the model with glm()
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# alc and dlyr are available
# find the model with glm()
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# alc and dlyr are available
# find the model with glm()
m <- glm(high_use ~ famrel + goout + absences + sex, data = alc, family = "binomial")
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
g2 <- ggplot(alc, aes(absences))
library(tidyr); library(dplyr); library(ggplot2); library(GGally)
g2 <- ggplot(alc, aes(absences))
# draw a bar plot of high_use by sex
g2 + facet_wrap("sex") + geom_bar()
g2 <- ggplot(alc, aes(goout))
# draw a bar plot of high_use by sex
g2 + facet_wrap("sex") + geom_bar()
g2 <- ggplot(alc, aes(goout, fill = sex))
# draw a bar plot of high_use by sex
g2 + facet_wrap("sex") + geom_bar()
# initialize a plot of high_use and G3
g3 <- ggplot(alc, aes(x = high_use, y = goout, col = sex))
# define the plot as a boxplot and draw it
g3 + geom_boxplot() + ylab("going out") + ggtitle("Going out by alcohol consumption and sex")
