# Open the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep= "\t", header = TRUE)
# Dimensions of data
dim(lrn14)
# The data is (183, 60) dimensional.
# Structure of the data
str(lrn14)
#  Gender is a factor with levels "F" (1) and "M" (2). Other variables are integers.
# Variables from Aa to Dj are the values of 1 to 5 (likert), describing students answers to the survey.
#3.
# Open dplyr for filter() command:
library(dplyr)
# The questions:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# Exclude observations where the exam points variable is zero.
lrn14 <- filter(lrn14, Points > 0)
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
#Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf
# and points by combining questions
# choose a handful of columns to keep
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(keep_columns))
learning2014
?header
?header()
#4.
# Save as csv:
read.csv(learning2014, file="learning2014.csv")
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
?fread
# Check that all is okay with the csv-file
library(data.table)
fread("learning2014.csv")
learning2014csv <- fread("learning2014.csv")
head(learning2014csv)
str(learning2014csv)
View(learning2014csv)
View(learning2014csv)
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
# Usva Topo
# 6.11.2018
# This file is the R-script for "Regression and model validation" exercises.
#2.
# Open the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep= "\t", header = TRUE)
# Dimensions of data
dim(lrn14)
# The data is (183, 60) dimensional.
# Structure of the data
str(lrn14)
#  Gender is a factor with levels "F" (1) and "M" (2). Other variables are integers.
# Variables from Aa to Dj are the values of 1 to 5 (likert), describing students answers to the survey.
#3.
# Open dplyr for filter() command:
library(dplyr)
# The questions:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# Exclude observations where the exam points variable is zero.
lrn14 <- filter(lrn14, Points > 0)
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
#Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf
# and points by combining questions
# choose a handful of columns to keep
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(keep_columns))
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
# Check that all is okay with the csv-file
library(data.table)
#4.
# Save as csv:
write.table(learning2014, file="learning2014.txt")
head(learning2014csv)
# Check that all is okay with the csv-file
read.csv2("learning2014.csv")
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
#4.
# Save as csv:
write.csv(learning2014, file="learning2014.csv")
# Check that all is okay with the csv-file
learning2014csv <- read.csv2("learning2014.csv")
fread("learning2014.csv")
head(learning2014csv)
str(learning2014csv)
#4.
# Save as csv:
write.txt(learning2014, file="learning2014.txt")
#4.
# Save as csv:
write.table(learning2014, file="learning2014.txt")
# Check that all is okay with the csv-file
learning2014txt <- read.table("learning2014.txt")
head(learning2014txt)
str(learning2014txt)
?header
?head
head(learning2014txt)
str(learning2014txt)
# Usva Topo
# 6.11.2018
# This file is the R-script for "Regression and model validation" exercises.
#2.
# Open the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep= "\t", header = TRUE)
# Dimensions of data
dim(lrn14)
# The data is (183, 60) dimensional.
# Structure of the data
str(lrn14)
#  Gender is a factor with levels "F" (1) and "M" (2). Other variables are integers.
# Variables from Aa to Dj are the values of 1 to 5 (likert), describing students answers to the survey.
#3.
# Open dplyr for filter() command:
library(dplyr)
# The questions:
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# Exclude observations where the exam points variable is zero.
lrn14 <- filter(lrn14, Points > 0)
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra <- rowMeans(strategic_columns)
#Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf
# and points by combining questions
# choose a handful of columns to keep
keep_columns <- c("gender","Age","Attitude", "deep", "stra", "surf", "Points")
learning2014 <- select(lrn14, one_of(keep_columns))
#4.
# Save as txt:
write.table(learning2014, file="learning2014.txt")
# Check that all is okay with the txt-file
learning2014txt <- read.table("learning2014.txt")
head(learning2014txt)
str(learning2014txt)
# The text file contains seven variables gender, Age, Attitude, deep, stra, surf and points.
# Variables have the correct type (i.e. gender as factor, age as initial...)
head(learning2014txt)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep=",", header=TRUE)
View(lrn14)
View(lrn14)
?sep
?read.table
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="/", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep=".", header=TRUE)
lrn14 <- read.table("http://rprogramming.net/write-csv-in-r/", sep="t/", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
lrn14 <- read.table("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/learning2014.txt", sep=",", header=TRUE)
dim(lrn14)
View(lrn14)
View(lrn14)
pairs(learning2014[-1], col=learning2014$gender)
pairs(lrn14[-1], col=learning2014$gender)
pairs(lrn14[-1], col=lrn14$gender)
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(learning14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
pairs(lrn14[-1], col=lrn14$gender)
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# access the GGally and ggplot2 libraries
library(GGally)
library(ggplot2)
# create a more advanced plot matrix with ggpairs()
p <- ggpairs(lrn14, mapping = aes(col=gender, alpha = 0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# create an plot matrix with ggpairs()
ggpairs(lrn14, lower = list(combo = wrap("facethist", bins = 20)))
# create a regression model with multiple explanatory variables
my_model2 <- lm(points ~ attitude + stra + surf, data = lrn2014)
# create a regression model with multiple explanatory variables
my_model2 <- lm(points ~ attitude + stra + surf, data = lrn14)
# print out a summary of the model
summary(my_model2)
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn2014) + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn14) + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender, alpha = 0.3), data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender), data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, data = lrn14)  + geom_smooth(method = "lm")
# a scatter plot of points versus attitude
qplot(attitude, points, mapping = aes(col=gender), data = lrn14)  + geom_smooth(method = "lm")
# fit a linear model
my_model <- lm(points ~ attitude, data = lrn14)
# print out a summary of the model
summary(my_model)
# draw diagnostic plots using the plot() function. Choose the plots 1, 2 and 5
par(mfrow = c(2,2))
plot(my_model, which = c(1,2,5))
