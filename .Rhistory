# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   sex + reason +     nursery +    internet   + guardian + traveltime + studytime + failures +  paid +      activities + higher + romantic + famrel + freetime+ goout+ Dalc+ Walc +       health + absences , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   sex + reason +      internet   + guardian + traveltime + studytime + failures +  paid +      activities + higher + romantic + famrel + freetime+ goout+ Dalc+ Walc +       health + absences , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   sex + absences, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   famrel +age + goout + absences + sex, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   famrel +age + goout + absences + sex +G1 + G2 + G3, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel +age + goout + absences + sex +G1 + G2 + G3 +Medu +       Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   famrel +age + goout + absences + sex +G1 + G2 + G3 +Medu + studytime +      Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel +age + goout + absences + sex +G1 + G2 + G3 +Medu + studytime +      Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel +age + goout + absences + sex +Medu + studytime +      Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel +age + goout + absences + sex  + studytime +        Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~   famrel +age + goout + absences + sex  + studytime +       , data = alc, family = "binomial")
m <- glm(high_use ~   famrel +age + goout + absences + sex  + studytime     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel +age + goout + absences + sex  + studytime     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
m <- glm(high_use ~  absences     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~   famrel + absences     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# initialize a plot of 'high_use' versus 'probability' in 'alc'
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
m <- glm(high_use ~  school +     sex +        age +        address +   famsize +    Pstatus  + Medu +       Fedu +       Mjob + Fjob +       reason +     nursery +    internet   + guardian + traveltime + studytime + failures + schoolsup +
famsup +    paid +      activities + higher + romantic + famrel + freetime+ goout+ Dalc+ Walc +       health + absences + G1 + G2 +  G3  , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# the logistic regression model m and dataset alc with predictions are available
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# kun prob = 0, kuinka usein väärässä
# kun prob = 1, kuinka usein oikeassa
# kun prob= alc$probability
m <- glm(high_use ~   famrel +age + goout + absences + sex +G1 + G2 + G3 +Medu + studytime +      Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# the logistic regression model m and dataset alc with predictions are available
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# kun prob = 0, kuinka usein väärässä
# kun prob = 1, kuinka usein oikeassa
# kun prob= alc$probability
m <- glm(high_use ~   famrel +age + goout + absences + sex +Medu + studytime +      Fedu +       Mjob + Fjob      , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# the logistic regression model m and dataset alc with predictions are available
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# kun prob = 0, kuinka usein väärässä
# kun prob = 1, kuinka usein oikeassa
# kun prob= alc$probability
m <- glm(high_use ~   famrel +age + goout + absences + sex  + studytime     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# the logistic regression model m and dataset alc with predictions are available
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# kun prob = 0, kuinka usein väärässä
# kun prob = 1, kuinka usein oikeassa
# kun prob= alc$probability
m <- glm(high_use ~   famrel + absences     , data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
summary(alc$high_use)
# the logistic regression model m and dataset alc with predictions are available
# define a loss function (average prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# kun prob = 0, kuinka usein väärässä
# kun prob = 1, kuinka usein oikeassa
# kun prob= alc$probability
?round
### 5. Dimensionality reduction techniques
read.table("human.txt")
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Open dplyr, needed later
library(dplyr)
# 3.
str(hd)
str(gii)
dim(hd)
# 195   8 dimensional
dim(gii)
# 195  10 dimensional
summary(hd)
summary(gii)
# 4.
# Change the names of variables to more convinient form. I want to make sure, that
# the column names are still easy to interpret, and therefore I won't change much
# some of the names.
names(hd)
colnames(hd)<- c("HDI.Rank" ,"Country","HDI",  "Life.Expectancy", "Expected.Education"
,"Education" , "GNI.cap", "GNI.cap.minus.HDI.Rank"  )
names(gii)
colnames(gii) <- c("GII.Rank", "Country", "GII", "MMR", "ABR",
"PR", "SE.Female", "SE.Male", "LFPR.Female", "LFPR.Male" )
# 5.
# Secondary education ratio, with females / males
se.ratio <- gii$SE.Female / gii$SE.Male
# Add as new column to gii
gii <- cbind(gii, se.ratio)
# labour force participation of females and males
LFPR.ratio <- gii$LFPR.Female / gii$LFPR.Male
gii$LFPR.ratio <- LFPR.ratio
head(gii)
# Everything seems to work!
# 6.
join_by <- c("Country")
human <- inner_join(gii, hd, by = join_by)
dim(human)
# Dimensions 195 19
#Save the data
write.table(human, "human.txt")
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
install.packages("stringr")
library(stringr)
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
str(human$GNI.cap)
str_replace(human$GNI.cap, pattern = ",", replace= "") >%> as.numeric()
str_replace(human$GNI.cap, pattern = ",", replace= "") %>% as.numeric()
head(human)
names(human)
mean(human$PR)
names(hd)
names(gii)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
names(gii)
names(hd)
mean(gii$Percent.Representation.in.Parliament)
gii$Percent.Representation.in.Parliament
summary(gii$Percent.Representation.in.Parliament)
colnames(hd)<- c("HDI.Rank" ,"Country","HDI",  "Life.Expectancy", "Expected.Education"
,"Education" , "GNI.cap", "GNI.cap.minus.HDI.Rank"  )
names(gii)
colnames(gii) <- c("GII.Rank", "Country", "GII", "MMR", "ABR",
"PR", "SE.Female", "SE.Male", "LFPR.Female", "LFPR.Male" )
# 5.
summary(gii$PR)
names(human)
# Columns to remove:
remove <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
# Columns to remove:
remove <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
human <-
# 2.
# Read datasets:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Open dplyr, needed later
library(dplyr)
# 3.
str(hd)
str(gii)
dim(hd)
# 195   8 dimensional
dim(gii)
# 195  10 dimensional
summary(hd)
summary(gii)
# 4.
# Change the names of variables to more convinient form. I want to make sure, that
# the column names are still easy to interpret, and therefore I won't change much
# some of the names.
names(hd)
colnames(hd)<- c("HDI.Rank" ,"Country","HDI",  "Life.Expectancy", "Expected.Education"
,"Education" , "GNI.cap", "GNI.cap.minus.HDI.Rank"  )
names(gii)
colnames(gii) <- c("GII.Rank", "Country", "GII", "MMR", "ABR",
"PR", "SE.Female", "SE.Male", "LFPR.Female", "LFPR.Male" )
# 5.
# Secondary education ratio, with females / males
se.ratio <- gii$SE.Female / gii$SE.Male
# Add as new column to gii
gii <- cbind(gii, se.ratio)
# labour force participation of females and males
LFPR.ratio <- gii$LFPR.Female / gii$LFPR.Male
gii$LFPR.ratio <- LFPR.ratio
head(gii)
# Everything seems to work!
# 6.
join_by <- c("Country")
human <- inner_join(gii, hd, by = join_by)
dim(human)
# Dimensions 195 19
#Save the data
write.table(human, "human.txt")
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
# 1.
# Mutate GNI.cap to string
library(stringr)
str(human$GNI.cap)
human$GNI.cap
str_replace(human$GNI.cap, pattern = ",", replace= "") %>% as.numeric()
# 2. Exclude a list of unneeded variables
names(human)
# Columns to remove:
remove <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
human <- select(human, -one_of(remove))
head(human)
names(human)
# 2.
# Read datasets:
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Open dplyr, needed later
library(dplyr)
# 3.
str(hd)
str(gii)
dim(hd)
# 195   8 dimensional
dim(gii)
# 195  10 dimensional
summary(hd)
summary(gii)
# 4.
# Change the names of variables to more convinient form. I want to make sure, that
# the column names are still easy to interpret, and therefore I won't change much
# some of the names.
names(hd)
colnames(hd)<- c("HDI.Rank" ,"Country","HDI",  "Life.Expectancy", "Expected.Education"
,"Education" , "GNI.cap", "GNI.cap.minus.HDI.Rank"  )
names(gii)
colnames(gii) <- c("GII.Rank", "Country", "GII", "MMR", "ABR",
"PR", "SE.Female", "SE.Male", "LFPR.Female", "LFPR.Male" )
# 5.
# Secondary education ratio, with females / males
se.ratio <- gii$SE.Female / gii$SE.Male
# Add as new column to gii
gii <- cbind(gii, se.ratio)
# labour force participation of females and males
LFPR.ratio <- gii$LFPR.Female / gii$LFPR.Male
gii$LFPR.ratio <- LFPR.ratio
head(gii)
# Everything seems to work!
# 6.
join_by <- c("Country")
human <- inner_join(gii, hd, by = join_by)
dim(human)
# Dimensions 195 19
#Save the data
write.table(human, "human.txt")
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
# 1.
# Mutate GNI.cap to string
library(stringr)
str(human$GNI.cap)
human$GNI.cap
str_replace(human$GNI.cap, pattern = ",", replace= "") %>% as.numeric()
# 2. Exclude a list of unneeded variables
names(human)
# Columns to remove:
remove <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
human <- select(human, one_of(remove))
human <- select(human, one_of(keep))
# Columns to remove:
keep <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
human <- select(human, one_of(keep))
### 5. Dimensionality reduction techniques
human <-read.table("human.txt")
library(stringr)
str(human$GNI.cap)
human$GNI.cap
str_replace(human$GNI.cap, pattern = ",", replace= "") %>% as.numeric()
# 2. Exclude a list of unneeded variables
names(human)
# Columns to remove:
keep <- c("Country", "se.ratio", "LFPR.ratio", "Expected.Education", "Life.Expectancy", "GNI.cap", "MMR", "ABR", "PR")
human <- select(human, one_of(keep))
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
# 4.
# Remove the observations which relate to regions instead of countries.
tail(human, n = 10)
# 4.
# Remove the observations which relate to regions instead of countries.
tail(human, n = 10)
# define the last indice we want to keep
last <- nrow(human) - 7
tail(human)
human <- human[1:last, ]
tail(human)
# 5.
# Define the row names of the data by the country names and remove the country name column from the data.
rownames(human) <- human$Country
head(human)
# Remove the country name column from the data
human <- select(human, -Country)
write.table(human, "human.txt")
